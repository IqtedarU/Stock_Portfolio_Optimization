import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta
import numpy as np
from scipy.optimize import minimize
import matplotlib.pyplot as plt
from fredapi import Fred


tickers = ['SPY', 'BND', 'GLD', 'QQQ', 'VTI']

end_date = datetime.today()
start_date = end_date - timedelta(days=5*365)

adj_close_df = pd.DataFrame()

for ticker in tickers:
   data = yf.download(ticker, start=start_date, end=end_date)
   adj_close_df[ticker] = data["Adj Close"]

print(adj_close_df)

plt.figure(figsize=(14, 7))
for ticker in tickers:
    plt.plot(adj_close_df[ticker], lw=2, alpha=0.8,label=ticker)
plt.legend(loc='upper left', fontsize=12)
plt.ylabel('price ($)')

log_returns = np.log(adj_close_df / adj_close_df.shift(1))

log_returns = log_returns.dropna()

cov_matrix = log_returns.cov()*252
print(cov_matrix)

def standard_deviation (weights, cov_matrix):
   variance = weights.T @ cov_matrix @ weights
   return np.sqrt(variance)

def expected_return(weights, log_returns):
   return np.sum(log_returns.mean()*weights)*252

def sharpe_ratio(weights, log_returns, cov_matrix, risk_free_rate):
   return (expected_return(weights,log_returns) - risk_free_rate) / standard_deviation(weights, cov_matrix)

fred = Fred(api_key='d877c54880a490a3e60295547b4cf1b2')
ten_year_treasury_rate = fred.get_series_latest_release('GS10')/100

risk_free_rate= ten_year_treasury_rate.iloc[-1]
print(risk_free_rate)

def neg_sharpe_ratio(weights, log_returns, cov_matrix, risk_free_rate):
   return -sharpe_ratio(weights, log_returns, cov_matrix, risk_free_rate)

def random_z_score():
   return np.random.normal(0,1)

def scenerio_gain_loss(portfolio_value, portfolio_std_dev, z_score, days):
   return portfolio_value * optimal_portfolio_return * days + portfolio_value * portfolio_std_dev * z_score *np.sqrt(days)

constraints = {'type': "eq", "fun": lambda weights: np.sum(weights)-1}
bounds = [(0, 0.5) for _ in range(len(tickers))]

initial_weights = np.array([1/len(tickers)]*len(tickers))

optimized_results = minimize(neg_sharpe_ratio, initial_weights, args=(log_returns, cov_matrix, risk_free_rate), method="SLSQP", constraints=constraints, bounds=bounds)

optimal_weights = optimized_results.x

print("Optimal Weights:")
for ticker, weight in zip(tickers, optimal_weights):
   print(f"{ticker}: {weight:.4f}")

optimal_portfolio_return = expected_return(optimal_weights, log_returns)
optimal_portfolio_volatility = standard_deviation(optimal_weights, cov_matrix)
optimal_sharpe_ratio = sharpe_ratio(optimal_weights, log_returns, cov_matrix, risk_free_rate)

print(f"Expected Annual Return: {optimal_portfolio_return:.4f}")
print(f"Expected Volatility: {optimal_portfolio_volatility:.4f}")
print(f"Sharpe Ratio: {optimal_sharpe_ratio:.4f}")

historical_returns = (log_returns * optimal_weights).sum(axis = 1)

portfolio_value = 100000
days = 5
simulations = 10000
range_returns = historical_returns.rolling(window= days).sum()
range_returns = range_returns.dropna()
scenerio_return = []
for i in range (simulations):
   z_score = random_z_score()
   scenerio_return.append(scenerio_gain_loss(portfolio_value,optimal_portfolio_volatility,z_score,days))

confidence_interval = 0.95
VaR = np.percentile(scenerio_return, 100*(1-confidence_interval))
hist_VaR = np.percentile(range_returns, 100*(1-confidence_interval))

range_returns_dollar = range_returns * portfolio_value

plt.figure(figsize=(10, 6))
plt.hist(scenerio_return,bins=50,density=True)
plt.xlabel('Scenerio Gain/Loss ($)')
plt.ylabel('frequency')
plt.title(f'Distribution of Portfolio Gain/Loss over {days} Days using Monte Carlos')
plt.axvline(-VaR, color='r', linestyle='dashed', linewidth=2, label =f'Var at {confidence_interval:.0%} confidence level')


plt.figure(figsize=(10, 6))
plt.bar(tickers, optimal_weights)

plt.xlabel('Assets')
plt.ylabel('Optimal Weights')
plt.title('Optimal Portfolio Weights')

plt.figure(figsize=(10, 6))
plt.hist(range_returns_dollar.dropna(), bins=50, density=True)
plt.xlabel(f'{days}-Day Portfolio Return (Dollar Value)')
plt.ylabel('Frequency')
plt.title(f'Distribution of Portfolio for {days}-Day Returns using Historical VaR')
plt.axvline(-hist_VaR, color='r', linestyle='dashed', linewidth=2, label=f'VaR at {confidence_interval:.0%} confidence level')
plt.legend()

plt.show()
